* refs
started here:
https://blog.sumtypeofway.com/an-introduction-to-recursion-schemes/

* resume at section 4
at the later of the two appearances of this phrase
go curr@(Next attr) = let
* questions
** With Data.Functor.Foldable, why do I sometimes need to specify types?
This is likely resolved in the last part of PT's blog series.
Example, from Jbb.Ala_Kmett:
  To demo `forAna :: Int -> Base Abc Int`,
  I have to call `F.ana forAna 0 :: Abc`.
** Why are RAlgebra and RAlgebra' equivalent?
Jbb.Abc demonstrates it -- but I still lack intuition.
https://blog.sumtypeofway.com/recursion-schemes-part-iii-folds-in-context/
** Where is `ana`'s dual concept to `cata`'s "paired source value"?
Symbolically, the duality is clear. Conceptually, though, why the dual of a (value, value's history) is an Either value (someting becoming a value) is mysterious to me.
** Is the Branch case in `sow` more complex than necessary?
Would this look similar?
    (Branch, _)  -> Fork (Automatic left)
                         (Manual Bloom)
                         (Automatic right)
And in that case, because there are no nested CVAttr values (i.e. no Manuals containing Automatics), could it be implemented with an apomorphism instead of a futumorphism?
** [#A] asked
https://github.com/patrickt/recschemes/issues/5
*** What's up with the cata laws?
 In [part 2](https://blog.sumtypeofway.com/recursion-schemes-part-2/) I'm confused by the laws. The first is stated as an equation: `cata In = id`. That's clear. But the second is stated as an implication:

 ```
 -- given alg :: f a -> a
 -- and func  :: f a -> f
 cata (alg >>> fmap func) =>
    (cata alg) >>> func
 ```

 Is that `=>` symbol supposed to be `=`?

 And the third is even stranger:

 ```
 -- given alg  :: f a -> a
 -- and func :: f a -> g a
 cata (f >>> In) >>> cata g
    ==> cata (f >>> g)
 ```

 Is that `==>` symbol again supposed to be `=`? And why does it stipulate types for `alg` and `func`, without ever using them?
** DONE solved|stale I think
*** Sections I and III claim Section II defines ana
Whatever, I figured it out.
Section III: "In the previous post, we defined ana, the anamorphism"
*** The code for para generalizing cata appears to be broken
I think I solved it.

(In section 3 of the blog series.)
It is this:
  cata' :: Functor f => Algebra f a -> Term f -> a
  cata' = para'' (const f)
But f is not defined, except as a type constraint.
* suggestions
** Stop|Continue v. Automatic|Manual
In Section 4, sometimes he uses Stop and Continue, sometimes Continue and Manual, sometimes Manual and AUtomatic.
** in the definition of `sow`, the case height=0 need not be considered
see section 3 of the blog, or my program src/Plant.hs
